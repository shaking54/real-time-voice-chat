{"ast":null,"code":"import React,{useState,useRef}from'react';import ChatWindow from'./components/ChatWindow';import VoiceInput from'./components/VoiceInput';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[messages,setMessages]=useState([]);const audioRef=useRef(null);// Reference to the audio element\nconst addMessage=function(message,sender){let audio=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;setMessages(prevMessages=>[...prevMessages,{text:message,sender,audio}]);};const handleUserMessage=async message=>{addMessage(message,'user');try{// Send message to the backend\nconst response=await fetch('http://localhost:8000/test',{method:'GET',headers:{'Content-Type':'application/json'}});if(response.ok){// Fetch the audio response\nconst audioRes=await fetch('http://localhost:8000/test');const blob=await audioRes.blob();const audioUrl=URL.createObjectURL(blob);// Store the bot message with hidden audio\naddMessage('Audio Response','bot',audioUrl);// Play the audio automatically\nif(audioRef.current){audioRef.current.src=audioUrl;audioRef.current.play();}}else{addMessage('Error: Unable to get a response from the server.','bot');}}catch(error){addMessage('Error: Unable to connect to the server.','bot');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(ChatWindow,{messages:messages}),/*#__PURE__*/_jsx(VoiceInput,{onSend:handleUserMessage}),/*#__PURE__*/_jsx(\"audio\",{ref:audioRef,style:{display:'none'}})]});};export default App;","map":{"version":3,"names":["React","useState","useRef","ChatWindow","VoiceInput","jsx","_jsx","jsxs","_jsxs","App","messages","setMessages","audioRef","addMessage","message","sender","audio","arguments","length","undefined","prevMessages","text","handleUserMessage","response","fetch","method","headers","ok","audioRes","blob","audioUrl","URL","createObjectURL","current","src","play","error","className","children","onSend","ref","style","display"],"sources":["/home/shaking/qlay/real-time-voice-chat/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport ChatWindow from './components/ChatWindow';\nimport VoiceInput from './components/VoiceInput';\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const audioRef = useRef(null); // Reference to the audio element\n\n  const addMessage = (message, sender, audio = null) => {\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { text: message, sender, audio },\n    ]);\n  };\n\n  const handleUserMessage = async (message) => {\n    addMessage(message, 'user');\n\n    try {\n      // Send message to the backend\n      const response = await fetch('http://localhost:8000/test', {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (response.ok) {\n        // Fetch the audio response\n        const audioRes = await fetch('http://localhost:8000/test');\n        const blob = await audioRes.blob();\n        const audioUrl = URL.createObjectURL(blob);\n\n        // Store the bot message with hidden audio\n        addMessage('Audio Response', 'bot', audioUrl);\n\n        // Play the audio automatically\n        if (audioRef.current) {\n          audioRef.current.src = audioUrl;\n          audioRef.current.play();\n        }\n      } else {\n        addMessage('Error: Unable to get a response from the server.', 'bot');\n      }\n    } catch (error) {\n      addMessage('Error: Unable to connect to the server.', 'bot');\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <ChatWindow messages={messages} />\n      <VoiceInput onSend={handleUserMessage} />\n      {/* Hidden audio element for automatic playback */}\n      <audio ref={audioRef} style={{ display: 'none' }} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CAC/C,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjD,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAAAW,QAAQ,CAAGV,MAAM,CAAC,IAAI,CAAC,CAAE;AAE/B,KAAM,CAAAW,UAAU,CAAG,QAAAA,CAACC,OAAO,CAAEC,MAAM,CAAmB,IAAjB,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC/CN,WAAW,CAAES,YAAY,EAAK,CAC5B,GAAGA,YAAY,CACf,CAAEC,IAAI,CAAEP,OAAO,CAAEC,MAAM,CAAEC,KAAM,CAAC,CACjC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAM,iBAAiB,CAAG,KAAO,CAAAR,OAAO,EAAK,CAC3CD,UAAU,CAACC,OAAO,CAAE,MAAM,CAAC,CAE3B,GAAI,CACF;AACA,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,4BAA4B,CAAE,CACzDC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CAEF,GAAIH,QAAQ,CAACI,EAAE,CAAE,CACf;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAAC,4BAA4B,CAAC,CAC1D,KAAM,CAAAK,IAAI,CAAG,KAAM,CAAAD,QAAQ,CAACC,IAAI,CAAC,CAAC,CAClC,KAAM,CAAAC,QAAQ,CAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC,CAE1C;AACAhB,UAAU,CAAC,gBAAgB,CAAE,KAAK,CAAEiB,QAAQ,CAAC,CAE7C;AACA,GAAIlB,QAAQ,CAACqB,OAAO,CAAE,CACpBrB,QAAQ,CAACqB,OAAO,CAACC,GAAG,CAAGJ,QAAQ,CAC/BlB,QAAQ,CAACqB,OAAO,CAACE,IAAI,CAAC,CAAC,CACzB,CACF,CAAC,IAAM,CACLtB,UAAU,CAAC,kDAAkD,CAAE,KAAK,CAAC,CACvE,CACF,CAAE,MAAOuB,KAAK,CAAE,CACdvB,UAAU,CAAC,yCAAyC,CAAE,KAAK,CAAC,CAC9D,CACF,CAAC,CAED,mBACEL,KAAA,QAAK6B,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BhC,IAAA,CAACH,UAAU,EAACO,QAAQ,CAAEA,QAAS,CAAE,CAAC,cAClCJ,IAAA,CAACF,UAAU,EAACmC,MAAM,CAAEjB,iBAAkB,CAAE,CAAC,cAEzChB,IAAA,UAAOkC,GAAG,CAAE5B,QAAS,CAAC6B,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAO,CAAE,CAAE,CAAC,EACjD,CAAC,CAEV,CAAC,CAED,cAAe,CAAAjC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}