{"ast":null,"code":"import React,{useState}from'react';import ChatWindow from'./components/ChatWindow';import VoiceInput from'./components/VoiceInput';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[messages,setMessages]=useState([]);const addMessage=(message,sender)=>{setMessages(prevMessages=>[...prevMessages,{text:message,sender}]);};const handleUserMessage=async message=>{addMessage(message,'user');// Send the user's message to the backend API\ntry{const response=await fetch('http://localhost:5000/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message})});if(response.ok){const data=await response.json();addMessage(data.reply,'bot');// Optionally, you can add code here to play the audio response from the backend\n}else{addMessage('Error: Unable to get a response from the server.','bot');}}catch(error){addMessage('Error: Unable to connect to the server.','bot');}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(ChatWindow,{messages:messages}),/*#__PURE__*/_jsx(VoiceInput,{onSend:handleUserMessage})]});};export default App;","map":{"version":3,"names":["React","useState","ChatWindow","VoiceInput","jsx","_jsx","jsxs","_jsxs","App","messages","setMessages","addMessage","message","sender","prevMessages","text","handleUserMessage","response","fetch","method","headers","body","JSON","stringify","ok","data","json","reply","error","className","children","onSend"],"sources":["/home/shaking/qlay/real-time-voice-chat/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ChatWindow from './components/ChatWindow';\nimport VoiceInput from './components/VoiceInput';\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n\n  const addMessage = (message, sender) => {\n    setMessages((prevMessages) => [...prevMessages, { text: message, sender }]);\n  };\n\n  const handleUserMessage = async (message) => {\n    addMessage(message, 'user');\n\n    // Send the user's message to the backend API\n    try {\n      const response = await fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        addMessage(data.reply, 'bot');\n        // Optionally, you can add code here to play the audio response from the backend\n      } else {\n        addMessage('Error: Unable to get a response from the server.', 'bot');\n      }\n    } catch (error) {\n      addMessage('Error: Unable to connect to the server.', 'bot');\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <ChatWindow messages={messages} />\n      <VoiceInput onSend={handleUserMessage} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAChD,MAAO,CAAAC,UAAU,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEjD,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAE5C,KAAM,CAAAU,UAAU,CAAGA,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtCH,WAAW,CAAEI,YAAY,EAAK,CAAC,GAAGA,YAAY,CAAE,CAAEC,IAAI,CAAEH,OAAO,CAAEC,MAAO,CAAC,CAAC,CAAC,CAC7E,CAAC,CAED,KAAM,CAAAG,iBAAiB,CAAG,KAAO,CAAAJ,OAAO,EAAK,CAC3CD,UAAU,CAACC,OAAO,CAAE,MAAM,CAAC,CAE3B;AACA,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,4BAA4B,CAAE,CACzDC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEX,OAAQ,CAAC,CAClC,CAAC,CAAC,CAEF,GAAIK,QAAQ,CAACO,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClCf,UAAU,CAACc,IAAI,CAACE,KAAK,CAAE,KAAK,CAAC,CAC7B;AACF,CAAC,IAAM,CACLhB,UAAU,CAAC,kDAAkD,CAAE,KAAK,CAAC,CACvE,CACF,CAAE,MAAOiB,KAAK,CAAE,CACdjB,UAAU,CAAC,yCAAyC,CAAE,KAAK,CAAC,CAC9D,CACF,CAAC,CAED,mBACEJ,KAAA,QAAKsB,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BzB,IAAA,CAACH,UAAU,EAACO,QAAQ,CAAEA,QAAS,CAAE,CAAC,cAClCJ,IAAA,CAACF,UAAU,EAAC4B,MAAM,CAAEf,iBAAkB,CAAE,CAAC,EACtC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAR,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}